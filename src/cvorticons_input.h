#ifndef _CHOCOLATE_KEEN_VORTICONS_INPUT_
#define _CHOCOLATE_KEEN_VORTICONS_INPUT_

/* NOTE: Mapper event names are taken off mapper-SVN.map,
 * generated by DOSBox SVN.
 */

#define EMULATED_MOUSE_HORIZONTAL_RES 640
#define EMULATED_MOUSE_VERTICAL_RES 200

typedef enum GameControl_T {
    CONTROL_KEYB = 0, CONTROL_MOUSE, CONTROL_JOY_1, CONTROL_JOY_2, CONTROL_DEMO
} GameControl_T;

static const char * mapperHandlerNames[] = {
    "shutdown", "capmouse", "fullscr"
};

// NOTE: The "lessthan" key (secondary backslash of 102-key layouts)
// appears to generate (XT) scancode 0x56, in comparison to 0x2B
// of the "normal" backslash key.

// For more details see this:
// http://www.barcodeman.com/altek/mule/scandoc.php

typedef struct {
    const char *name;
    uint8_t dosScanCode;
} EmulatedKey_T;

#if 0
typedef enum EmulatedMouseButtonMask_T {
    EMULATED_MOUSE_BUTTON_LEFT = 1, EMULATED_MOUSE_BUTTON_RIGHT = 2
} EmulatedMouseButtonMask_T;
#endif

typedef struct {
    //uint8_t key_map[128];
    uint8_t mouseButtonsMask; // 1 == Left, 2 == Right, 4 == Middle
    uint8_t modifiersMask; // 1, 2 and/or 4
    int16_t mouseColumn, mouseRow;
    int16_t joystickAxesPolls[4]; // Values in the range 0..500
    uint8_t joystickButtonsMask; // 1,2,4,8 (gameport output: 16,32,64,128)
} EmulatedInputDevices_T;

// FIXME: If this changes, so should the array engine_emulatedKeysTable.
// It's better than using constant numbers directly, though..
typedef enum EmulatedKeyIndex_T {
    EMULATEDKEYINDEX_ESC = 0,
    EMULATEDKEYINDEX_F1,
    EMULATEDKEYINDEX_F2,
    EMULATEDKEYINDEX_F3,
    EMULATEDKEYINDEX_F4,
    EMULATEDKEYINDEX_F5,
    EMULATEDKEYINDEX_F6,
    EMULATEDKEYINDEX_F7,
    EMULATEDKEYINDEX_F8,
    EMULATEDKEYINDEX_F9,
    EMULATEDKEYINDEX_F10,
    EMULATEDKEYINDEX_F11,
    EMULATEDKEYINDEX_F12,
    EMULATEDKEYINDEX_GRAVE,
    EMULATEDKEYINDEX_1,
    EMULATEDKEYINDEX_2,
    EMULATEDKEYINDEX_3,
    EMULATEDKEYINDEX_4,
    EMULATEDKEYINDEX_5,
    EMULATEDKEYINDEX_6,
    EMULATEDKEYINDEX_7,
    EMULATEDKEYINDEX_8,
    EMULATEDKEYINDEX_9,
    EMULATEDKEYINDEX_0,
    EMULATEDKEYINDEX_MINUS,
    EMULATEDKEYINDEX_EQUALS,
    EMULATEDKEYINDEX_BSPACE,
    EMULATEDKEYINDEX_TAB,
    EMULATEDKEYINDEX_Q,
    EMULATEDKEYINDEX_W,
    EMULATEDKEYINDEX_E,
    EMULATEDKEYINDEX_R,
    EMULATEDKEYINDEX_T,
    EMULATEDKEYINDEX_Y,
    EMULATEDKEYINDEX_U,
    EMULATEDKEYINDEX_I,
    EMULATEDKEYINDEX_O,
    EMULATEDKEYINDEX_P,
    EMULATEDKEYINDEX_LBRACKET,
    EMULATEDKEYINDEX_RBRACKET,
    EMULATEDKEYINDEX_ENTER,
    EMULATEDKEYINDEX_CAPSLOCK,
    EMULATEDKEYINDEX_A,
    EMULATEDKEYINDEX_S,
    EMULATEDKEYINDEX_D,
    EMULATEDKEYINDEX_F,
    EMULATEDKEYINDEX_G,
    EMULATEDKEYINDEX_H,
    EMULATEDKEYINDEX_J,
    EMULATEDKEYINDEX_K,
    EMULATEDKEYINDEX_L,
    EMULATEDKEYINDEX_SEMICOLON,
    EMULATEDKEYINDEX_QUOTE,
    EMULATEDKEYINDEX_BACKSLASH,
    EMULATEDKEYINDEX_LSHIFT,
    EMULATEDKEYINDEX_LESSTHAN,
    EMULATEDKEYINDEX_Z,
    EMULATEDKEYINDEX_X,
    EMULATEDKEYINDEX_C,
    EMULATEDKEYINDEX_V,
    EMULATEDKEYINDEX_B,
    EMULATEDKEYINDEX_N,
    EMULATEDKEYINDEX_M,
    EMULATEDKEYINDEX_COMMA,
    EMULATEDKEYINDEX_PERIOD,
    EMULATEDKEYINDEX_SLASH,
    EMULATEDKEYINDEX_RSHIFT,
    EMULATEDKEYINDEX_LCTRL,
    EMULATEDKEYINDEX_LALT,
    EMULATEDKEYINDEX_SPACE,
    EMULATEDKEYINDEX_RALT,
    EMULATEDKEYINDEX_RCTRL,
    EMULATEDKEYINDEX_PRINTSCREEN,
    EMULATEDKEYINDEX_SCROLLLOCK,
    EMULATEDKEYINDEX_PAUSE,
    EMULATEDKEYINDEX_INSERT,
    EMULATEDKEYINDEX_HOME,
    EMULATEDKEYINDEX_PAGEUP,
    EMULATEDKEYINDEX_DELETE,
    EMULATEDKEYINDEX_END,
    EMULATEDKEYINDEX_PAGEDOWN,
    EMULATEDKEYINDEX_UP,
    EMULATEDKEYINDEX_LEFT,
    EMULATEDKEYINDEX_DOWN,
    EMULATEDKEYINDEX_RIGHT,
    EMULATEDKEYINDEX_NUMLOCK,
    EMULATEDKEYINDEX_KP_DIVIDE,
    EMULATEDKEYINDEX_KP_MULTIPLY,
    EMULATEDKEYINDEX_KP_MINUS,
    EMULATEDKEYINDEX_KP_7,
    EMULATEDKEYINDEX_KP_8,
    EMULATEDKEYINDEX_KP_9,
    EMULATEDKEYINDEX_KP_PLUS,
    EMULATEDKEYINDEX_KP_4,
    EMULATEDKEYINDEX_KP_5,
    EMULATEDKEYINDEX_KP_6,
    EMULATEDKEYINDEX_KP_1,
    EMULATEDKEYINDEX_KP_2,
    EMULATEDKEYINDEX_KP_3,
    EMULATEDKEYINDEX_KP_ENTER,
    EMULATEDKEYINDEX_KP_0,
    EMULATEDKEYINDEX_KP_PERIOD,
    EMULATEDKEYINDEX_KEY_INDICES_COUNT
} EmulatedKeyIndex_T;


static const char * mapperClientJoyButtonNames[] = {
    "jbutton_0_0", "jbutton_0_1", "jbutton_1_0", "jbutton_1_1",
    // EXTRAS (e.g. "jbutton_0_2" is gameport-equivalent to "jbutton_1_0")
    "jbutton_0_2", "jbutton_0_3"
};

static const char * mapperClientJoyAxisNames[] = {
    "jaxis_0_0-", "jaxis_0_0+", "jaxis_0_1-", "jaxis_0_1+",
    "jaxis_1_0-", "jaxis_1_0+", "jaxis_1_1-", "jaxis_1_1+",
};

static const char * mapperClientMouseButtonNames[] = {
    "mbutton_left", "mbutton_right", "mbutton_middle"
};

static const char * mapperClientMouseAxisNames[] = {
    "maxis_horiz-", "maxis_horiz+", "maxis_vert-", "maxis_vert+"
};

static const char * mapperClientHandlerNames[] = {
    "hand_shutdown", "hand_capcursor", "hand_fullscr",
    /*"hand_savemap"*/
};

static const char * mapperClientModNames[] = {
    "mod_1", "mod_2", "mod_3"
};

typedef enum EmulatedInput_T {
    EMULATEDINPUT_NONE = 0,
    EMULATEDINPUT_KEYPRESS,
    EMULATEDINPUT_MOUSEBUTTONPRESS, EMULATEDINPUT_MOUSEMOTION,
    EMULATEDINPUT_JOYBUTTONPRESS, EMULATEDINPUT_JOYMOTION,
    EMULATEDINPUT_HANDLER,
    EMULATEDINPUT_MODTOGGLE
} EmulatedInput_T;

// Used in the launcher UI (say after capturing a new binding):
// - For a key press, the value is an SDL 2.0 scancode or SDL 1.2 keysym
// - For mouse and joystick buttons, button numbers are used
// - Positive directions of joystick axes are identified by +1, +2...
// - Similarly negative directions are identified by -1, -2...
// - HAT directions are picked in a similar fashion
typedef enum HostInput_T {
    HOSTINPUT_NONE = 0,
    HOSTINPUT_KEYPRESS,
    HOSTINPUT_MOUSEBUTTONPRESS, HOSTINPUT_MOUSEMOTION,
    HOSTINPUT_JOYBUTTONPRESS, HOSTINPUT_JOYMOTION, HOSTINPUT_JOYHAT
} HostInput_T;

typedef enum InputHandler_T {
    INPUTHANDLER_SHUTDOWN = 1, INPUTHANDLER_CAPTURECURSOR,
    INPUTHANDLER_FULLSCREEN, /*INPUTHANDLER_SAVEINPUTMAPPINGS,*/
    INPUTHANDLER_HANDLER_AMOUNT_COUNT_PLUS_ONE
} InputHandler_T;

typedef struct {
    EmulatedInput_T emulatedInput;
    int value; // Button/Modifier code, or a signed analog axis ID (+-1,+-2...)
    int modMask;
} MappedInputEvent_T;

// WARNING: Breaks compatibility with mapper files from versions <= 0.9.3
// But if there is too much, it must imply there are duplications.
// Counting:
// - EMULATEDKEYINDEX_KEY_INDICES_COUNT (emulated) keys
// - 4 possible joystick buttons (for two joysticks or one 4-button gamepad)
// - 8 possible joystick axis directions (4 axes, 2 directions per axis)
// - 3 possible mouse buttons
// - 4 possible mouse axis directions
// - (INPUTHANDLER_HANDLER_AMOUNT_COUNT_PLUS_ONE-1) special handlers
#define MAX_EMU_MAPPINGS_PER_HOST_ENTRY (EMULATEDKEYINDEX_KEY_INDICES_COUNT + INPUTHANDLER_HANDLER_AMOUNT_COUNT_PLUS_ONE + 18)

typedef struct {
    MappedInputEvent_T list[MAX_EMU_MAPPINGS_PER_HOST_ENTRY];
    int numOfEvents;
} MappedInputEventList_T;

typedef struct {
    MappedInputEventList_T *joystickButtonMappings;
    MappedInputEventList_T *joystickPAxisMappings; // Positive direction
    MappedInputEventList_T *joystickNAxisMappings; // Negative direction
    MappedInputEventList_T *joystickPHorizHatMappings; // Right HAT direction
    MappedInputEventList_T *joystickNHorizHatMappings; // Left HAT direction
    MappedInputEventList_T *joystickPVertHatMappings; // Down HAT direction
    MappedInputEventList_T *joystickNVertHatMappings; // Up HAT direction
    int numOfButtons, numOfAxes, numOfHats;
} HostJoystickMapping_T;

// These store the maps themselves
typedef struct {
    EmulatedInputDevices_T currEmuInputStatus;

    //MappedInputEvent_T *mainEventsBuffer;
#if SDL_VERSION_ATLEAST(2,0,0)
    MappedInputEventList_T keyMappings[SDL_NUM_SCANCODES];
#else
    MappedInputEventList_T keyMappings[SDLK_LAST];
#endif
    MappedInputEventList_T mouseButtonMappings[3];
    MappedInputEventList_T mouseRelPAxisMappings[2], mouseRelNAxisMappings[2];
    HostJoystickMapping_T *joystickMappings;
    int numOfJoysticks;
    SDL_Joystick **sdlJoysticks;

    // In theory more can be added (styli, touchscreens, sensors...)
} InputMappingStruct_T;

#endif
